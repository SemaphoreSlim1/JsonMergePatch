trigger:
  batch: true
  branches:
    include:
     - master
  paths:
   exclude:
     - Readme.md
     - docs/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  targetCoveragePercentage: 80

  
stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: UnitTests
    displayName: Unit Tests
    workspace:
      clean: all
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: '.Net Core 3.1.x'
      inputs:
        version: '3.1.x'
        packageType: 'sdk'

    - task: DotNetCoreCLI@2
      displayName: 'Ensure Report Generator on unit test projects'
      inputs:
        command: 'custom'
        projects: '**/*UnitTest*.csproj'
        custom: 'add'
        arguments: 'package ReportGenerator'

    - task: DotNetCoreCLI@2
      displayName: 'Ensure coverlet.msbuild on unit test projects'
      inputs:
        command: 'custom'
        projects: '**/*UnitTest*.csproj'
        custom: 'add'
        arguments: 'package coverlet.msbuild'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: 'test'
        projects: '**/*UnitTest*.csproj'
        arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:threshold=$(targetCoveragePercentage) /p:thresholdType=line /p:thresholdStat=total'
    
    - task: reportGenerator@4
      displayName: 'Genrate Coverage report'
      inputs:
        reports: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
        targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
        assemblyfilters: '-xunit*'
    
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/TestResults/coverage'
 
  - job: Build
    displayName: Build
    workspace:
      clean: all
    pool:
       vmImage: 'ubuntu-latest'
    steps:
    # - task: UseDotNet@2
    #   displayName: '.Net Core 3.1.x'
    #   inputs:
    #     version: '3.1.x'
    #     packageType: 'sdk'
    - task: gitversion/setup@0
      inputs:
        versionSpec: '5.x'
        
    - task: gitversion/execute@0
      displayName: 'Execute Git Version'
    
    - task: PowerShell@2
      displayName: 'List Environment Variables'
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem env:'

    - task: DotNetCoreCLI@2
      displayName: 'NuGet Pack'
      inputs:
        command: custom
        custom: 'pack'
        includesymbols: true
        projects: '**/*.csproj'
        arguments: '--configuration $buildConfiguration --output $(Build.ArtifactStagingDirectory)/NuGet /p:PackageVersion=$(gitversion.fullSemVer) /p:AssemblyVersion=$(gitversion.assemblySemVer) /p:FileVersion=$(gitversion.assemblySemFileVer) /p:InformationalVersion=$(gitversion.sha)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*UnitTest*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '56675ffc-8e70-407c-8f36-09a3e132a5cd'

    # - task: NuGetCommand@2
    #   inputs:
    #     command: 'push'
    #     packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    #     nuGetFeedType: 'internal'
    #     publishVstsFeed: 'matthewethomas/Prerelease'
    #     allowPackageConflicts: true